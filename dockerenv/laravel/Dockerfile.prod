# Stage 1: Builder - Install dependencies and prepare the application
FROM php:7.4-cli AS builder

# Install required system dependencies for Debian Bullseye
RUN apt-get update && apt-get install -y \
    firebird-dev \
    libicu-dev \
    libzip-dev \
    libonig-dev \
    default-libmysqlclient-dev \
    libpng-dev \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libgmp-dev \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions using the installer
ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/

RUN chmod +x /usr/local/bin/install-php-extensions \
    && install-php-extensions \
        pdo_firebird \
        pdo_mysql \
        intl \
        mbstring \
        bcmath \
        zip \
        gd \
        gmp \
        curl \
        dom \
        json \
        exif \
        pcntl

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www/html

# Copy application code
COPY . /var/www/html

# Install Composer dependencies for production
RUN composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist --ignore-platform-reqs

# Generate Laravel key (if needed) and optimize
RUN php artisan key:generate --force || true \
    && php artisan config:cache \
    # && php artisan route:cache \
    && php artisan view:cache

# Stage 2: Runtime - Use a Debian-based PHP-FPM image for production
FROM php:7.4-fpm

# Install minimal runtime dependencies (only Nginx and curl for healthcheck)
RUN apt-get update && apt-get install -y \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy PHP extensions and their dependencies from builder stage
COPY --from=builder /usr/lib /usr/lib
COPY --from=builder /usr/local/lib/php/extensions /usr/local/lib/php/extensions
COPY --from=builder /usr/local/etc/php/conf.d /usr/local/etc/php/conf.d

# Create non-root user
RUN groupadd -g 1000 www && useradd -u 1000 -g www -m -s /bin/bash www

# Set working directory
WORKDIR /var/www/html

# Copy built application from builder stage
COPY --from=builder --chown=www:www /var/www/html /var/www/html

# Copy Nginx configuration
RUN mkdir -p /etc/nginx/http.d
COPY <<EOF /etc/nginx/http.d/default.conf
server {
    listen 80;
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/html/public;

    location ~ \.php$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
    }

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
        gzip_static on;
    }
}
EOF

# Copy PHP-FPM configuration overrides
RUN mkdir -p /usr/local/etc/php-fpm.d
COPY <<EOF /usr/local/etc/php-fpm.d/zz-docker.conf
[www]
user = www
group = www
listen = 127.0.0.1:9000
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
EOF

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost || exit 1

# Run as non-root user
USER www

# Start PHP-FPM and Nginx
CMD ["sh", "-c", "php-fpm -D && nginx -g 'daemon off;'"]
